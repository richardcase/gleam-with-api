#!/bin/bash

# Distributed Customer API Demo Script
# Shows both legacy and distributed modes

echo "üöÄ Customer API - Gleam OTP Application with Distributed Supervisor"
echo "=================================================================="
echo ""
echo "This demo showcases a Gleam application with Horde-like distributed"
echo "supervisor functionality for fault-tolerant customer management."
echo ""

echo "üìÅ Enhanced Project Structure:"
echo "‚îú‚îÄ‚îÄ src/"
echo "‚îÇ   ‚îú‚îÄ‚îÄ customer_api.gleam           # Main application (mode-aware)"
echo "‚îÇ   ‚îú‚îÄ‚îÄ distributed_customer_api.gleam  # Distributed mode demo"
echo "‚îÇ   ‚îú‚îÄ‚îÄ customer.gleam               # Customer data model" 
echo "‚îÇ   ‚îú‚îÄ‚îÄ customer_actor.gleam         # Customer service (legacy + distributed)"
echo "‚îÇ   ‚îú‚îÄ‚îÄ database.gleam               # In-memory database"
echo "‚îÇ   ‚îú‚îÄ‚îÄ distributed_supervisor.gleam # Horde-like distributed supervisor ‚ú®"
echo "‚îÇ   ‚îú‚îÄ‚îÄ app_supervisor.gleam         # Application supervisor ‚ú®"
echo "‚îÇ   ‚îî‚îÄ‚îÄ config.gleam                 # Configuration management ‚ú®"
echo "‚îú‚îÄ‚îÄ test/"
echo "‚îÇ   ‚îú‚îÄ‚îÄ customer_api_test.gleam      # Legacy unit tests"
echo "‚îÇ   ‚îî‚îÄ‚îÄ distributed_supervisor_test.gleam # Distributed tests ‚ú®"
echo "‚îú‚îÄ‚îÄ ARCHITECTURE.md                  # Updated architecture guide"
echo "‚îî‚îÄ‚îÄ README.md                        # Documentation"
echo ""

echo "üèóÔ∏è Architecture Components:"
echo ""
echo "1. Customer Data Model (src/customer.gleam):"
echo "   - Type-safe customer representation"
echo "   - Optional fields with proper handling"
echo "   - Data validation and serialization"
echo ""

echo "2. Database Layer (src/database.gleam):"
echo "   - In-memory storage with Dict"
echo "   - Full CRUD operations"
echo "   - Email uniqueness validation"
echo "   - Immutable state updates"
echo ""

echo "3. Customer Service (src/customer_actor.gleam):"
echo "   - Legacy service layer (functional API)"
echo "   - Distributed service with OTP actors ‚ú®"
echo "   - Error handling and propagation"
echo "   - State management with supervision ‚ú®"
echo ""

echo "4. Distributed Supervisor (src/distributed_supervisor.gleam): ‚ú®"
echo "   - Horde-like distributed process management"
echo "   - Consistent hashing for actor distribution"
echo "   - Automatic node discovery and monitoring"
echo "   - Fault tolerance with failover"
echo "   - Real-time cluster status monitoring"
echo "   - Graceful node shutdown with actor migration ‚ú®"
echo "   - Zero-downtime maintenance and scaling ‚ú®"
echo ""

echo "5. Configuration (src/config.gleam): ‚ú®"
echo "   - Environment-based configuration"
echo "   - Support for both legacy and distributed modes"
echo "   - Flexible cluster configuration"
echo ""

echo "üéØ Demo Options:"
echo ""
echo "1. Legacy Mode (Original Functionality):"
echo "   gleam run"
echo ""
echo "2. Distributed Mode (New Horde-like Features): ‚ú®"
echo "   DISTRIBUTED_MODE=true gleam run"
echo ""
echo "3. Custom Cluster Configuration: ‚ú®"
echo "   export DISTRIBUTED_MODE=true"
echo "   export CLUSTER_NODES=\"node1@localhost,node2@localhost,node3@localhost\""
echo "   export HASH_RING_SIZE=512"
echo "   gleam run"
echo ""
echo "4. Run Tests:"
echo "   gleam test                                    # All tests"
echo "   gleam test -- --module distributed_supervisor_test  # Distributed tests only"
echo ""

echo "üåü Key Features Demonstrated:"
echo ""
echo "Legacy Features:"
echo "‚Ä¢ Type-safe functional programming with Gleam"
echo "‚Ä¢ Immutable data structures and state management"
echo "‚Ä¢ Error handling with Result types"
echo "‚Ä¢ Database abstraction layer"
echo "‚Ä¢ Comprehensive testing strategy"
echo ""
echo "NEW Distributed Features: ‚ú®"
echo "‚Ä¢ Distributed supervisor with Horde-like functionality"
echo "‚Ä¢ OTP actor system with proper supervision"
echo "‚Ä¢ Consistent hashing for load distribution"
echo "‚Ä¢ Automatic node discovery and cluster membership"
echo "‚Ä¢ Fault tolerance with automatic failover"
echo "‚Ä¢ Real-time cluster monitoring and status reporting"
echo "‚Ä¢ Configuration management for distributed operation"
echo "‚Ä¢ Graceful node shutdown with zero-downtime actor migration ‚ú®"
echo "‚Ä¢ State preservation across node boundaries ‚ú®"
echo ""

echo "üîÑ Production Readiness:"
echo ""
echo "Completed Features: ‚úÖ"
echo "‚Ä¢ OTP Dependencies added (gleam_otp, gleam_erlang)"
echo "‚Ä¢ Real OTP actors with proper supervision"
echo "‚Ä¢ Distributed supervisor with consistent hashing"
echo "‚Ä¢ Cluster membership and fault tolerance"
echo "‚Ä¢ Configuration management"
echo "‚Ä¢ Comprehensive testing"
echo "‚Ä¢ Graceful node shutdown with actor migration ‚ú®"
echo "‚Ä¢ Zero-downtime maintenance and scaling ‚ú®"
echo ""
echo "Next Steps for Full Production:"
echo "‚Ä¢ Add REST API handlers with Wisp framework"
echo "‚Ä¢ Replace in-memory database with SQLite/PostgreSQL"
echo "‚Ä¢ Add authentication and authorization"
echo "‚Ä¢ Add monitoring and observability"
echo "‚Ä¢ Add Docker containerization"
echo ""

echo "üì° Future API Endpoints (Designed for Distributed System):"
echo "GET    /api/customers           # List all customers (distributed)"
echo "POST   /api/customers           # Create new customer (auto-distributed)"
echo "GET    /api/customers/:id       # Get customer by ID (location-aware)"
echo "PUT    /api/customers/:id       # Update customer (distributed state)"
echo "DELETE /api/customers/:id       # Delete customer (cluster-aware)"
echo "GET    /api/cluster/status      # Cluster health and distribution ‚ú®"
echo "GET    /api/cluster/nodes       # Active cluster members ‚ú®"
echo "POST   /api/cluster/rebalance   # Trigger manual rebalancing ‚ú®"
echo ""

echo "üéâ This demonstrates a production-ready foundation for building"
echo "distributed, fault-tolerant customer management systems using:"
echo "‚Ä¢ Gleam's type safety and functional programming"
echo "‚Ä¢ OTP's battle-tested actor model and supervision"
echo "‚Ä¢ Horde-inspired distributed process management"
echo "‚Ä¢ BEAM VM's legendary reliability and concurrency"
echo ""
echo "Try it out with: DISTRIBUTED_MODE=true gleam run"
echo ""
echo "See README.md and ARCHITECTURE.md for complete technical details!"